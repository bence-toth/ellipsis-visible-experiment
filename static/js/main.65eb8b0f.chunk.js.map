{"version":3,"sources":["Ellipsis.js","App.js","reportWebVitals.js","index.js"],"names":["Ellipsis","useEllipsisVisible","isEllipsisVisible1","ellipsisVisibleRef1","isEllipsisVisible2","ellipsisVisibleRef2","isEllipsisVisible3","ellipsisVisibleRef3","isEllipsisVisible4","ellipsisVisibleRef4","className","ref","App","useState","isEllipsisBig","setIsEllipsisBig","useEllipsisVisibleWrapper","wrapperNodeWidth","wrapperRef","onClick","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAkCeA,EA9BE,WACf,MAAkDC,cAAlD,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAAkDF,cAAlD,mBAAOG,EAAP,KAA2BC,EAA3B,KACA,EAAkDJ,cAAlD,mBAAOK,EAAP,KAA2BC,EAA3B,KACA,EAAkDN,cAAlD,mBAAOO,EAAP,KAA2BC,EAA3B,KACA,OACE,qCACE,sBAAKC,UAAU,aAAf,UACE,4BAAIR,EAAqB,YAAc,YACvC,4BAAIE,EAAqB,YAAc,YACvC,4BAAIE,EAAqB,YAAc,YACvC,4BAAIE,EAAqB,YAAc,eAEzC,sBAAKE,UAAU,WAAf,UACE,mBAAGC,IAAKR,EAAR,wCACA,mBAAGQ,IAAKN,EAAR,gDACA,mBAAGM,IAAKJ,EAAR,yEAGA,sBAAKG,UAAU,OAAf,UACE,mBAAGC,IAAKF,EAAR,iEAGA,qBAAKC,UAAU,QAAf,sCCOKE,G,MAxBH,WACV,MAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,EAAuCC,cAAvC,mBAAOC,EAAP,KAAyBC,EAAzB,KAEA,OACE,sBAAKR,UAAU,MAAM,WAAUI,EAAeH,IAAKO,EAAnD,UACE,wBACER,UAAU,eACVS,QAAS,WACPJ,GAAkBD,IAHtB,mCAQA,qBAAKJ,UAAU,kBAAkB,WAAUI,EAA3C,SACE,cAAC,IAAmCM,SAApC,CAA6CC,MAAOJ,EAApD,SACE,cAAC,EAAD,aCfKK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.65eb8b0f.chunk.js","sourcesContent":["import { useEllipsisVisible } from \"react-hook-text-overflow\";\n\nimport \"./Ellipsis.css\";\n\nconst Ellipsis = () => {\n  const [isEllipsisVisible1, ellipsisVisibleRef1] = useEllipsisVisible();\n  const [isEllipsisVisible2, ellipsisVisibleRef2] = useEllipsisVisible();\n  const [isEllipsisVisible3, ellipsisVisibleRef3] = useEllipsisVisible();\n  const [isEllipsisVisible4, ellipsisVisibleRef4] = useEllipsisVisible();\n  return (\n    <>\n      <div className=\"indicators\">\n        <p>{isEllipsisVisible1 ? \"Overflows\" : \"Visible\"}</p>\n        <p>{isEllipsisVisible2 ? \"Overflows\" : \"Visible\"}</p>\n        <p>{isEllipsisVisible3 ? \"Overflows\" : \"Visible\"}</p>\n        <p>{isEllipsisVisible4 ? \"Overflows\" : \"Visible\"}</p>\n      </div>\n      <div className=\"ellipsis\">\n        <p ref={ellipsisVisibleRef1}>Something relatively short</p>\n        <p ref={ellipsisVisibleRef2}>Something which is slightly longer</p>\n        <p ref={ellipsisVisibleRef3}>\n          Something very very very very very very very very long here\n        </p>\n        <div className=\"flex\">\n          <p ref={ellipsisVisibleRef4}>\n            Something very long with something else on the side\n          </p>\n          <div className=\"fixed\">Something else</div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Ellipsis;\n","import { useState } from \"react\";\nimport {\n  useEllipsisVisibleWrapper,\n  EllipsisVisibleWrapperWidthContext,\n} from \"react-hook-text-overflow\";\n\nimport Ellipsis from \"./Ellipsis\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [isEllipsisBig, setIsEllipsisBig] = useState(true);\n\n  const [wrapperNodeWidth, wrapperRef] = useEllipsisVisibleWrapper();\n\n  return (\n    <div className=\"App\" data-big={isEllipsisBig} ref={wrapperRef}>\n      <button\n        className=\"toggleButton\"\n        onClick={() => {\n          setIsEllipsisBig(!isEllipsisBig);\n        }}\n      >\n        Toggle container size\n      </button>\n      <div className=\"ellipsisWrapper\" data-big={isEllipsisBig}>\n        <EllipsisVisibleWrapperWidthContext.Provider value={wrapperNodeWidth}>\n          <Ellipsis />\n        </EllipsisVisibleWrapperWidthContext.Provider>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
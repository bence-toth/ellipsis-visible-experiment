{"version":3,"sources":["useEllipsisVisible.js","Ellipsis.js","App.js","reportWebVitals.js","index.js"],"names":["EllipsisVisibleWrapperWidthContext","React","createContext","useEllipsisVisible","useState","overflowingNode","setOverflowingNode","isEllipsisVisible","setEllipsisVisible","wrapperNodeWidth","useContext","ellipsisVisibleRef","useCallback","node","HTMLElement","useEffect","scrollWidth","offsetWidth","Ellipsis","isEllipsisVisible1","ellipsisVisibleRef1","isEllipsisVisible2","ellipsisVisibleRef2","isEllipsisVisible3","ellipsisVisibleRef3","isEllipsisVisible4","ellipsisVisibleRef4","className","ref","App","isEllipsisBig","setIsEllipsisBig","wrapperNode","setWrapperNode","setWrapperNodeWidth","wrapperRef","resizeObserver","ResizeObserver","entries","entry","contentBoxSize","Array","isArray","inlineSize","observe","unobserve","useEllipsisVisibleWrapper","onClick","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEMA,EAAqCC,IAAMC,gBAqC3CC,EAAqB,WACzB,MAA8CC,mBAAS,MAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAA0BC,EAA1B,KACMC,EAAmBC,qBAAWV,GAC9BW,EAAqBC,uBAAY,SAACC,GAClCA,aAAgBC,aAClBR,EAAmBO,KAEpB,IAUH,OARAE,qBAAU,WACiB,OAArBN,GAA6BJ,aAA2BS,aAC1DN,EACEH,EAAgBW,YAAcX,EAAgBY,eAGjD,CAACZ,EAAiBI,IAEd,CAACF,EAAmBI,I,eCvBdO,EA9BE,WACf,MAAkDf,IAAlD,mBAAOgB,EAAP,KAA2BC,EAA3B,KACA,EAAkDjB,IAAlD,mBAAOkB,EAAP,KAA2BC,EAA3B,KACA,EAAkDnB,IAAlD,mBAAOoB,EAAP,KAA2BC,EAA3B,KACA,EAAkDrB,IAAlD,mBAAOsB,EAAP,KAA2BC,EAA3B,KACA,OACE,qCACE,sBAAKC,UAAU,aAAf,UACE,4BAAIR,EAAqB,YAAc,YACvC,4BAAIE,EAAqB,YAAc,YACvC,4BAAIE,EAAqB,YAAc,YACvC,4BAAIE,EAAqB,YAAc,eAEzC,sBAAKE,UAAU,WAAf,UACE,mBAAGC,IAAKR,EAAR,wCACA,mBAAGQ,IAAKN,EAAR,gDACA,mBAAGM,IAAKJ,EAAR,yEAGA,sBAAKG,UAAU,OAAf,UACE,mBAAGC,IAAKF,EAAR,iEAGA,qBAAKC,UAAU,QAAf,sCCQKE,G,MAxBH,WACV,MAA0CzB,oBAAS,GAAnD,mBAAO0B,EAAP,KAAsBC,EAAtB,KAEA,EFVgC,WAChC,MAAsC3B,mBAAS,MAA/C,mBAAO4B,EAAP,KAAoBC,EAApB,KACA,EAAgD7B,mBAAS,MAAzD,mBAAOK,EAAP,KAAyByB,EAAzB,KAEMC,EAAavB,uBAAY,SAACC,GAC1BA,aAAgBC,aAClBmB,EAAepB,KAEhB,IAwBH,OAtBAE,qBAAU,WACR,IAAMqB,EAAiB,IAAIC,gBAAe,SAACC,GAAa,IAAD,gBACnCA,GADmC,IACrD,2BAA2B,CAAC,IAAnBC,EAAkB,QACzB,GAAIA,EAAMC,eAAgB,CAExB,IAAMA,EAAiBC,MAAMC,QAAQH,EAAMC,gBACvCD,EAAMC,eAAe,GACrBD,EAAMC,eACVN,EAAoBM,EAAeG,cAPc,kCAcvD,OAHIX,aAAuBlB,aACzBsB,EAAeQ,QAAQZ,GAElB,WACDA,aAAuBlB,aACzBsB,EAAeS,UAAUb,MAG5B,CAACA,IAEG,CAACvB,EAAkB0B,GEtBaW,GAAvC,mBAAOrC,EAAP,KAAyB0B,EAAzB,KAEA,OACE,sBAAKR,UAAU,MAAM,WAAUG,EAAeF,IAAKO,EAAnD,UACE,wBACER,UAAU,eACVoB,QAAS,WACPhB,GAAkBD,IAHtB,mCAQA,qBAAKH,UAAU,kBAAkB,WAAUG,EAA3C,SACE,cAAC9B,EAAmCgD,SAApC,CAA6CC,MAAOxC,EAApD,SACE,cAAC,EAAD,aChBKyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5a22a926.chunk.js","sourcesContent":["import React, { useState, useCallback, useContext, useEffect } from \"react\";\n\nconst EllipsisVisibleWrapperWidthContext = React.createContext();\n\nconst useEllipsisVisibleWrapper = () => {\n  const [wrapperNode, setWrapperNode] = useState(null);\n  const [wrapperNodeWidth, setWrapperNodeWidth] = useState(null);\n\n  const wrapperRef = useCallback((node) => {\n    if (node instanceof HTMLElement) {\n      setWrapperNode(node);\n    }\n  }, []);\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (let entry of entries) {\n        if (entry.contentBoxSize) {\n          // Firefox implements `contentBoxSize` as a single content rect, rather than an array\n          const contentBoxSize = Array.isArray(entry.contentBoxSize)\n            ? entry.contentBoxSize[0]\n            : entry.contentBoxSize;\n          setWrapperNodeWidth(contentBoxSize.inlineSize);\n        }\n      }\n    });\n    if (wrapperNode instanceof HTMLElement) {\n      resizeObserver.observe(wrapperNode);\n    }\n    return () => {\n      if (wrapperNode instanceof HTMLElement) {\n        resizeObserver.unobserve(wrapperNode);\n      }\n    };\n  }, [wrapperNode]);\n\n  return [wrapperNodeWidth, wrapperRef];\n};\n\nconst useEllipsisVisible = () => {\n  const [overflowingNode, setOverflowingNode] = useState(null);\n  const [isEllipsisVisible, setEllipsisVisible] = useState(false);\n  const wrapperNodeWidth = useContext(EllipsisVisibleWrapperWidthContext);\n  const ellipsisVisibleRef = useCallback((node) => {\n    if (node instanceof HTMLElement) {\n      setOverflowingNode(node);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (wrapperNodeWidth !== null && overflowingNode instanceof HTMLElement) {\n      setEllipsisVisible(\n        overflowingNode.scrollWidth > overflowingNode.offsetWidth\n      );\n    }\n  }, [overflowingNode, wrapperNodeWidth]);\n\n  return [isEllipsisVisible, ellipsisVisibleRef];\n};\n\nexport {\n  useEllipsisVisibleWrapper,\n  EllipsisVisibleWrapperWidthContext,\n  useEllipsisVisible,\n};\n","import { useEllipsisVisible } from \"./useEllipsisVisible\";\n\nimport \"./Ellipsis.css\";\n\nconst Ellipsis = () => {\n  const [isEllipsisVisible1, ellipsisVisibleRef1] = useEllipsisVisible();\n  const [isEllipsisVisible2, ellipsisVisibleRef2] = useEllipsisVisible();\n  const [isEllipsisVisible3, ellipsisVisibleRef3] = useEllipsisVisible();\n  const [isEllipsisVisible4, ellipsisVisibleRef4] = useEllipsisVisible();\n  return (\n    <>\n      <div className=\"indicators\">\n        <p>{isEllipsisVisible1 ? \"Overflows\" : \"Visible\"}</p>\n        <p>{isEllipsisVisible2 ? \"Overflows\" : \"Visible\"}</p>\n        <p>{isEllipsisVisible3 ? \"Overflows\" : \"Visible\"}</p>\n        <p>{isEllipsisVisible4 ? \"Overflows\" : \"Visible\"}</p>\n      </div>\n      <div className=\"ellipsis\">\n        <p ref={ellipsisVisibleRef1}>Something relatively short</p>\n        <p ref={ellipsisVisibleRef2}>Something which is slightly longer</p>\n        <p ref={ellipsisVisibleRef3}>\n          Something very very very very very very very very long here\n        </p>\n        <div className=\"flex\">\n          <p ref={ellipsisVisibleRef4}>\n            Something very long with something else on the side\n          </p>\n          <div className=\"fixed\">Something else</div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Ellipsis;\n","import { useState } from \"react\";\n\nimport Ellipsis from \"./Ellipsis\";\n\nimport {\n  useEllipsisVisibleWrapper,\n  EllipsisVisibleWrapperWidthContext,\n} from \"./useEllipsisVisible\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [isEllipsisBig, setIsEllipsisBig] = useState(true);\n\n  const [wrapperNodeWidth, wrapperRef] = useEllipsisVisibleWrapper();\n\n  return (\n    <div className=\"App\" data-big={isEllipsisBig} ref={wrapperRef}>\n      <button\n        className=\"toggleButton\"\n        onClick={() => {\n          setIsEllipsisBig(!isEllipsisBig);\n        }}\n      >\n        Toggle container size\n      </button>\n      <div className=\"ellipsisWrapper\" data-big={isEllipsisBig}>\n        <EllipsisVisibleWrapperWidthContext.Provider value={wrapperNodeWidth}>\n          <Ellipsis />\n        </EllipsisVisibleWrapperWidthContext.Provider>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}